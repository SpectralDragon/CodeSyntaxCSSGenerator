import Foundation
import Publish
import Splash
import Files
import PublishColorUtils

public extension Plugin {
    
    static func generateCodeCSS(
        withClassPrefix prefix: String = "",
        resourcePath: Path = "Resources",
        codeFileName: String = "codesyntax.css",
        theme: CodeTheme
    ) -> Self {
        Plugin(name: "CodeSyntaxCSSGenerator", installer: { context in
            if let folder = try? context.folder(at: resourcePath) {
                
                let colors = try theme.colors(resourceFolder: folder)
                
                var content = """
                /* THIS FILE WAS AUTO GENERATED. DO NOT CHANGE IT MANUAL */
                /* Generated by `CodeSyntaxCSSGeneratorPlugin` https://github.com/SpectralDragon/CodeSyntaxCSSGeneratorPlugin */\n\n
                """
                
                switch colors {
                case .single(let value):
                    let style = Self.cssStyle(prefix, colors: value)
                    
                    content.append(style)
                case .dynamic(let light, let dark):
                    let style = Self.cssStyle(prefix, colors: light)
                    
                    content.append(style)
                    
                    let darkStyle = Self.cssStyle(prefix, colors: dark)
                    
                    content.append("\n\n@media(prefers-color-scheme: dark) {\n")
                    
                    content.append("\t\(darkStyle.replacingOccurrences(of: "\n", with: "\n\t"))\n\n")
                    
                    content.append("}")
                }
                
                if folder.containsFile(named: codeFileName) {
                    try folder.file(at: codeFileName).delete()
                }
                
                let codeFile = try folder.createFile(at: codeFileName)
                
                try codeFile.write(content)
            }
        })
    }
    
    /// Generate css style using colors
    private static func cssStyle(_ prefix: String, colors: [TokenType: PublishColorUtils.Color]) -> String {
        
        var style = "\n"
        
        for (token, color) in colors {
            style.append(
            """
            \(prefix)\(token.string) {
            \tcolor: \(color.hexWithAlpha)
            }\n\n
            """
            )
        }
        
        return style
    }
}

